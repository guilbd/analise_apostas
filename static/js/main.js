 document.addEventListener('DOMContentLoaded', function() { const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]')); tooltipTriggerList.map(function (tooltipTriggerEl) { return new bootstrap.Tooltip(tooltipTriggerEl); }); const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]')); popoverTriggerList.map(function (popoverTriggerEl) { return new bootstrap.Popover(popoverTriggerEl); }); setTimeout(function() { const alerts = document.querySelectorAll('.alert:not(.alert-permanent)'); alerts.forEach(function(alert) { const bsAlert = new bootstrap.Alert(alert); bsAlert.close(); }); }, 5000); setupDashboardFunctions(); setupReportFunctions(); }); function setupDashboardFunctions() { const dashboardContainer = document.querySelector('.dashboard-container'); if (!dashboardContainer) return; const jogosLinks = document.querySelectorAll('.selecionar-jogo'); jogosLinks.forEach(link => { link.addEventListener('click', function(e) { e.preventDefault(); const timeCasa = this.getAttribute('data-casa'); const timeVisitante = this.getAttribute('data-visitante'); document.getElementById('time_casa').value = timeCasa; document.getElementById('time_visitante').value = timeVisitante; jogosLinks.forEach(l => l.classList.remove('active')); this.classList.add('active'); if (window.innerWidth < 768) { document.getElementById('form-analise').scrollIntoView({ behavior: 'smooth' }); } }); }); const formAnalise = document.getElementById('form-analise'); if (formAnalise) { formAnalise.addEventListener('submit', function() { const submitButton = this.querySelector('button[type="submit"]'); submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Analisando...'; submitButton.disabled = true; const loadingOverlay = document.createElement('div'); loadingOverlay.className = 'loading-overlay'; loadingOverlay.innerHTML = ` <div class="spinner-container"> <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;"> <span class="visually-hidden">Carregando...</span> </div> <p class="mt-3 text-white">Analisando jogo, por favor aguarde...</p> </div> `; document.body.appendChild(loadingOverlay); }); } } function setupReportFunctions() { const relatorioContainer = document.querySelector('.relatorio-container'); if (!relatorioContainer) return; if (typeof Chart !== 'undefined') { const probabilidadesCanvas = document.getElementById('probabilidades-chart'); if (probabilidadesCanvas) { const ctx = probabilidadesCanvas.getContext('2d'); new Chart(ctx, { type: 'pie', data: { labels: ['Vitória Casa', 'Empate', 'Vitória Visitante'], datasets: [{ data: [ parseFloat(probabilidadesCanvas.getAttribute('data-casa') || 0), parseFloat(probabilidadesCanvas.getAttribute('data-empate') || 0), parseFloat(probabilidadesCanvas.getAttribute('data-visitante') || 0) ], backgroundColor: ['#198754', '#6c757d', '#dc3545'] }] }, options: { responsive: true, plugins: { legend: { position: 'bottom' } } } }); } } const shareButtons = document.querySelectorAll('.share-report'); shareButtons.forEach(button => { button.addEventListener('click', function(e) { e.preventDefault(); if (navigator.share) { navigator.share({ title: 'Relatório de Apostas Esportivas', text: 'Confira este relatório de análise para ' + this.getAttribute('data-jogo'), url: window.location.href }) .catch(error => console.log('Erro ao compartilhar:', error)); } else { const tempInput = document.createElement('input'); document.body.appendChild(tempInput); tempInput.value = window.location.href; tempInput.select(); document.execCommand('copy'); document.body.removeChild(tempInput); alert('URL do relatório copiada para a área de transferência!'); } }); }); const printButtons = document.querySelectorAll('.print-report'); printButtons.forEach(button => { button.addEventListener('click', function(e) { e.preventDefault(); window.print(); }); }); } function atualizarJogosAjax() { const jogosContainer = document.querySelector('.jogos-list'); if (!jogosContainer) return; jogosContainer.innerHTML = ` <div class="text-center p-4"> <div class="spinner-border text-primary" role="status"> <span class="visually-hidden">Carregando...</span> </div> <p class="mt-2">Atualizando jogos...</p> </div> `; fetch('/api/jogos') .then(response => response.json()) .then(jogos => { if (jogos.length === 0) { jogosContainer.innerHTML = ` <div class="alert alert-info"> Nenhum jogo disponível. Clique em "Atualizar Jogos" para coletar jogos. </div> `; } else { let html = ''; jogos.forEach(jogo => { html += ` <a href="#" class="list-group-item list-group-item-action selecionar-jogo" data-casa="${jogo.time_casa}" data-visitante="${jogo.time_visitante}"> ${jogo.time_casa} vs ${jogo.time_visitante} <small class="text-muted d-block">${jogo.data} - ${jogo.hora}</small> </a> `; }); jogosContainer.innerHTML = html; setupDashboardFunctions(); } }) .catch(error => { jogosContainer.innerHTML = ` <div class="alert alert-danger"> Erro ao atualizar jogos: ${error.message} </div> `; }); } function analisarJogoAjax(timeCasa, timeVisitante) { if (!timeCasa || !timeVisitante) { alert('Por favor, informe os times para análise.'); return; } const loadingOverlay = document.createElement('div'); loadingOverlay.className = 'loading-overlay'; loadingOverlay.innerHTML = ` <div class="spinner-container"> <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;"> <span class="visually-hidden">Carregando...</span> </div> <p class="mt-3 text-white">Analisando ${timeCasa} vs ${timeVisitante}, por favor aguarde...</p> </div> `; document.body.appendChild(loadingOverlay); fetch('/api/analisar', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ time_casa: timeCasa, time_visitante: timeVisitante }) }) .then(response => response.json()) .then(data => { document.body.removeChild(loadingOverlay); if (data.error) { alert('Erro ao analisar jogo: ' + data.error); } else { window.location.href = '/relatorio/' + data.filename; } }) .catch(error => { document.body.removeChild(loadingOverlay); alert('Erro ao analisar jogo: ' + error.message); }); } 