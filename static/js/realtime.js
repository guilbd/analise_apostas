 let socket; let reconnectAttempts = 0; const maxReconnectAttempts = 5; const reconnectDelay = 3000; document.addEventListener('DOMContentLoaded', function() { setupRealTimeUpdates(); setupPollingUpdates(); setupNotifications(); setupDarkMode(); }); function setupRealTimeUpdates() { if ('WebSocket' in window) { connectWebSocket(); } else { console.log('WebSocket não é suportado por este navegador. Usando polling como fallback.'); } } function connectWebSocket() { const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:'; const wsUrl = `${protocol} try { socket = new WebSocket(wsUrl); socket.onopen = function(e) { console.log('Conexão WebSocket estabelecida'); reconnectAttempts = 0; updateConnectionStatus(true); if (document.getElementById('user-id')) { const userId = document.getElementById('user-id').value; socket.send(JSON.stringify({ type: 'auth', userId: userId })); } }; socket.onmessage = function(event) { handleWebSocketMessage(event.data); }; socket.onclose = function(event) { console.log('Conexão WebSocket fechada: ', event.code, event.reason); updateConnectionStatus(false); if (reconnectAttempts < maxReconnectAttempts) { reconnectAttempts++; setTimeout(connectWebSocket, reconnectDelay); console.log(`Tentando reconectar (${reconnectAttempts}/${maxReconnectAttempts})...`); } else { console.log('Número máximo de tentativas de reconexão atingido. Usando polling como fallback.'); setupPollingUpdates(true); } }; socket.onerror = function(error) { console.error('Erro na conexão WebSocket: ', error); updateConnectionStatus(false); }; } catch (error) { console.error('Erro ao inicializar WebSocket: ', error); updateConnectionStatus(false); setupPollingUpdates(true); } } function updateConnectionStatus(connected) { const statusIndicator = document.getElementById('connection-status'); if (statusIndicator) { if (connected) { statusIndicator.className = 'live-indicator connected'; statusIndicator.title = 'Conectado em tempo real'; } else { statusIndicator.className = 'live-indicator disconnected'; statusIndicator.title = 'Desconectado'; } } } function handleWebSocketMessage(data) { try { const message = JSON.parse(data); switch (message.type) { case 'jogos_update': updateJogosList(message.data); break; case 'relatorio_novo': addNewRelatorio(message.data); break; case 'notificacao': showNotification(message.data); break; case 'estatisticas_update': updateEstatisticas(message.data); break; default: console.log('Mensagem não reconhecida: ', message); } } catch (error) { console.error('Erro ao processar mensagem: ', error); } } function setupPollingUpdates(forcedFallback = false) { if (socket && socket.readyState === WebSocket.OPEN && !forcedFallback) { return; } setInterval(fetchJogosUpdates, 30000); setInterval(fetchRelatoriosUpdates, 60000); } function fetchJogosUpdates() { fetch('/api/jogos') .then(response => response.json()) .then(data => { updateJogosList(data); }) .catch(error => { console.error('Erro ao buscar atualizações de jogos: ', error); }); } function fetchRelatoriosUpdates() { fetch('/api/relatorios') .then(response => response.json()) .then(data => { updateRelatoriosList(data); }) .catch(error => { console.error('Erro ao buscar atualizações de relatórios: ', error); }); } function updateJogosList(jogos) { const jogosContainer = document.getElementById('lista-jogos'); if (!jogosContainer) return; const selectedGame = document.querySelector('.selecionar-jogo.active'); const selectedTimeCasa = selectedGame ? selectedGame.getAttribute('data-casa') : null; const selectedTimeVisitante = selectedGame ? selectedGame.getAttribute('data-visitante') : null; const jogosCounter = document.querySelector('.card-body h2'); if (jogosCounter) { jogosCounter.textContent = jogos.length; } if (jogos.length === 0) { jogosContainer.innerHTML = ` <div class="alert alert-info"> <i class="fas fa-info-circle me-2"></i>Nenhum jogo disponível. Clique em "Atualizar Jogos" para coletar jogos. </div> `; return; } let html = ''; jogos.forEach(jogo => { const isSelected = selectedTimeCasa === jogo.time_casa && selectedTimeVisitante === jogo.time_visitante; html += ` <a href="#" class="list-group-item list-group-item-action selecionar-jogo ${isSelected ? 'active' : ''}" data-casa="${jogo.time_casa}" data-visitante="${jogo.time_visitante}"> <div class="d-flex w-100 justify-content-between"> <h6 class="mb-1">${jogo.time_casa} vs ${jogo.time_visitante}</h6> <small class="text-primary">${jogo.data}</small> </div> <div class="d-flex justify-content-between"> <small class="text-muted">${jogo.hora}</small> <small class="text-muted">${jogo.campeonato}</small> </div> </a> `; }); if (jogosContainer.innerHTML !== html) { jogosContainer.innerHTML = html; const jogosLinks = document.querySelectorAll('.selecionar-jogo'); jogosLinks.forEach(link => { link.addEventListener('click', function(e) { e.preventDefault(); const timeCasa = this.getAttribute('data-casa'); const timeVisitante = this.getAttribute('data-visitante'); document.getElementById('time_casa').value = timeCasa; document.getElementById('time_visitante').value = timeVisitante; jogosLinks.forEach(l => l.classList.remove('active')); this.classList.add('active'); if (window.innerWidth < 768) { document.getElementById('form-analise').scrollIntoView({ behavior: 'smooth' }); } }); }); showToast('Jogos atualizados', `${jogos.length} jogos disponíveis para análise.`); } } function updateRelatoriosList(relatorios) { const relatoriosTable = document.getElementById('tabela-relatorios'); if (!relatoriosTable) return; const relatoriosCounter = document.querySelectorAll('.card-body h2')[1]; if (relatoriosCounter) { relatoriosCounter.textContent = relatorios.length; } const apostasCounter = document.querySelectorAll('.card-body h2')[2]; if (apostasCounter) { apostasCounter.textContent = relatorios.length * 3; } const tbody = relatoriosTable.querySelector('tbody'); if (!tbody) return; if (relatorios.length === 0) { tbody.innerHTML = ` <tr> <td colspan="3" class="text-center">Nenhum relatório disponível.</td> </tr> `; return; } let html = ''; relatorios.forEach(relatorio => { html += ` <tr> <td>${relatorio.jogo}</td> <td>${relatorio.data}</td> <td> <a href="/relatorio/${relatorio.filename}" class="btn btn-sm btn-primary"> <i class="fas fa-eye me-1"></i>Visualizar </a> </td> </tr> `; }); tbody.innerHTML = html; if (typeof $.fn.DataTable !== 'undefined' && $.fn.DataTable.isDataTable('#tabela-relatorios')) { $('#tabela-relatorios').DataTable().destroy(); $('#tabela-relatorios').DataTable({ language: { url: ' }, pageLength: 5, lengthMenu: [5, 10, 25, 50], responsive: true }); } updateApostasChart(relatorios.length); } function addNewRelatorio(relatorio) { fetchRelatoriosUpdates(); showToast('Novo Relatório', `Relatório para ${relatorio.jogo} foi gerado.`, 'success'); } function updateApostasChart(relatoriosCount) { const ctx = document.getElementById('apostas-chart'); if (!ctx) return; if (window.apostasChart) { window.apostasChart.data.datasets[0].data = [relatoriosCount, relatoriosCount, relatoriosCount]; window.apostasChart.update(); } else { window.apostasChart = new Chart(ctx, { type: 'pie', data: { labels: ['Baixo Risco', 'Risco Moderado', 'Alto Retorno'], datasets: [{ data: [relatoriosCount, relatoriosCount, relatoriosCount], backgroundColor: ['#198754', '#ffc107', '#dc3545'] }] }, options: { responsive: true, plugins: { legend: { position: 'bottom' }, title: { display: true, text: 'Distribuição por Tipo de Aposta' } } } }); } const apostasListItems = document.querySelectorAll('.list-group-item .badge'); apostasListItems.forEach(item => { item.textContent = relatoriosCount; }); } function updateEstatisticas(data) { const jogosCounter = document.querySelectorAll('.card-body h2')[0]; if (jogosCounter) { jogosCounter.textContent = data.jogos_count; } const relatoriosCounter = document.querySelectorAll('.card-body h2')[1]; if (relatoriosCounter) { relatoriosCounter.textContent = data.relatorios_count; } const apostasCounter = document.querySelectorAll('.card-body h2')[2]; if (apostasCounter) { apostasCounter.textContent = data.apostas_count; } updateApostasChart(data.relatorios_count); } function setupNotifications() { if ('Notification' in window) { if (Notification.permission !== 'granted' && Notification.permission !== 'denied') { const notificationBtn = document.createElement('button'); notificationBtn.className = 'btn btn-sm btn-primary notification-permission-btn'; notificationBtn.innerHTML = '<i class="fas fa-bell me-2"></i>Ativar Notificações'; notificationBtn.addEventListener('click', requestNotificationPermission); const header = document.querySelector('.card-header'); if (header) { header.appendChild(notificationBtn); } } } } function requestNotificationPermission() { Notification.requestPermission().then(permission => { if (permission === 'granted') { showToast('Notificações Ativadas', 'Você receberá notificações sobre novos relatórios e atualizações.', 'success'); const permissionBtn = document.querySelector('.notification-permission-btn'); if (permissionBtn) { permissionBtn.remove(); } const notification = new Notification('Sistema de Apostas Esportivas', { body: 'Notificações ativadas com sucesso!', icon: '/static/img/favicon.png' }); } }); } function showNotification(data) { if ('Notification' in window && Notification.permission === 'granted') { const notification = new Notification(data.title, { body: data.message, icon: '/static/img/favicon.png' }); notification.onclick = function() { window.focus(); if (data.url) { window.location.href = data.url; } this.close(); }; } showToast(data.title, data.message, data.type || 'info'); const notificationsList = document.getElementById('notifications-list'); if (notificationsList) { const notificationItem = document.createElement('div'); notificationItem.className = `notification-item ${data.type || 'info'}`; notificationItem.innerHTML = ` <div class="d-flex justify-content-between"> <h6 class="mb-0">${data.title}</h6> <small class="notification-time">${new Date().toLocaleTimeString()}</small> </div> <p class="mb-0">${data.message}</p> `; notificationsList.prepend(notificationItem); const items = notificationsList.querySelectorAll('.notification-item'); if (items.length > 5) { items[items.length - 1].remove(); } } } function showToast(title, message, type = 'info') { let toastContainer = document.getElementById('toast-container'); if (!toastContainer) { toastContainer = document.createElement('div'); toastContainer.id = 'toast-container'; toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3'; document.body.appendChild(toastContainer); } const toastId = 'toast-' + Date.now(); const toast = document.createElement('div'); toast.className = `toast show`; toast.id = toastId; toast.setAttribute('role', 'alert'); toast.setAttribute('aria-live', 'assertive'); toast.setAttribute('aria-atomic', 'true'); let bgClass = 'bg-primary'; switch (type) { case 'success': bgClass = 'bg-success'; break; case 'warning': bgClass = 'bg-warning'; break; case 'danger': bgClass = 'bg-danger'; break; case 'info': default: bgClass = 'bg-primary'; } toast.innerHTML = ` <div class="toast-header ${bgClass} text-white"> <strong class="me-auto">${title}</strong> <small>${new Date().toLocaleTimeString()}</small> <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button> </div> <div class="toast-body"> ${message} </div> `; toastContainer.appendChild(toast); setTimeout(() => { const toastElement = document.getElementById(toastId); if (toastElement) { toastElement.remove(); } }, 5000); const closeButton = toast.querySelector('.btn-close'); if (closeButton) { closeButton.addEventListener('click', function() { toast.remove(); }); } } function setupDarkMode() { const darkModeEnabled = localStorage.getItem('darkMode') === 'true'; if (darkModeEnabled) { document.body.classList.add('dark-mode'); } const darkModeToggle = document.createElement('div'); darkModeToggle.className = 'dark-mode-toggle'; darkModeToggle.innerHTML = darkModeEnabled ? '<i class="fas fa-sun"></i>' : '<i class="fas fa-moon"></i>'; darkModeToggle.addEventListener('click', function() { document.body.classList.toggle('dark-mode'); const isDarkMode = document.body.classList.contains('dark-mode'); localStorage.setItem('darkMode', isDarkMode); this.innerHTML = isDarkMode ? '<i class="fas fa-sun"></i>' : '<i class="fas fa-moon"></i>'; }); document.body.appendChild(darkModeToggle); } function sendWebSocketMessage(message) { if (socket && socket.readyState === WebSocket.OPEN) { socket.send(JSON.stringify(message)); return true; } return false; } function analisarJogoWebSocket(timeCasa, timeVisitante) { const sent = sendWebSocketMessage({ type: 'analisar_jogo', time_casa: timeCasa, time_visitante: timeVisitante }); if (!sent) { analisarJogoAjax(timeCasa, timeVisitante); } } 